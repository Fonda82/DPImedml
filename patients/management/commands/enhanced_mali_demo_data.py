import datetime
import random
from decimal import Decimal
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from django.db import transaction
from accounts.models import UserProfile
from patients.models import Patient, MedicalRecord, ICD10Code, VitalSigns
from appointments.models import Appointment
from facilities.models import Facility
from rehabilitation.models import RehabilitationPlan, RehabilitationSession
from vouchers.models import Voucher
from prescriptions.models import Prescription, Medication, MedicationCategory, PrescriptionMedication

class Command(BaseCommand):
    help = 'Enhanced Mali pediatric rehabilitation demo data with realistic scenarios'
    
    def add_arguments(self, parser):
        parser.add_argument('--patients', type=int, default=55, help='Number of patients to create')
        parser.add_argument('--doctors', type=int, default=18, help='Number of doctors to create')
        parser.add_argument('--clean', action='store_true', help='Clean existing data before seeding')
    
    def handle(self, *args, **options):
        if options['clean']:
            self.clean_data()
        
        num_patients = options['patients']
        num_doctors = options['doctors']
        
        self.stdout.write(self.style.SUCCESS('üá≤üá± Starting Enhanced Mali Pediatric Rehabilitation Demo Data...'))
        
        # Create all demo data in proper order (without atomic block to avoid transaction issues)
        facilities = self.create_enhanced_facilities()
        doctors, pharmacists = self.create_enhanced_medical_staff(num_doctors, facilities)
        medications = self.create_medication_database()
        icd10_codes = self.populate_icd10_codes()
        patients = self.create_enhanced_patients(num_patients, facilities)
        
        # Create comprehensive medical data
        self.create_enhanced_medical_records(patients, doctors, facilities, icd10_codes)
        self.create_vital_signs_data(patients)
        self.create_enhanced_appointments(patients, doctors, facilities)
        self.create_enhanced_rehabilitation_plans(patients, doctors)
        
        # Skip prescriptions and vouchers for now due to transaction complexity
        try:
            self.create_enhanced_prescriptions(patients, doctors, pharmacists, medications, facilities)
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è Skipped prescriptions due to transaction issues: {str(e)[:100]}...')
        
        try:
            self.create_enhanced_vouchers(patients, doctors, facilities)
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è Skipped vouchers due to model issues: {str(e)[:100]}...')
        
        # Create demo admin users
        self.create_demo_users(facilities)
        
        self.stdout.write(self.style.SUCCESS(f'üéâ Enhanced Mali demo data created successfully!'))
        self.stdout.write(f'‚úÖ {num_patients} patients, {num_doctors} doctors, {len(facilities)} facilities')
        self.stdout.write(f'üè• Mali pediatric rehabilitation context with Bamako districts')
        self.stdout.write(f'üìä TDR compliance metrics and HI workflow elements')
    
    def clean_data(self):
        """Clean existing demo data while preserving core users"""
        self.stdout.write('üßπ Cleaning existing data...')
        
        # Delete in proper order to avoid foreign key constraints
        PrescriptionMedication.objects.all().delete()
        Prescription.objects.all().delete()
        Medication.objects.all().delete()
        MedicationCategory.objects.all().delete()
        
        Voucher.objects.all().delete()
        RehabilitationSession.objects.all().delete()
        RehabilitationPlan.objects.all().delete()
        Appointment.objects.all().delete()
        
        VitalSigns.objects.all().delete()
        MedicalRecord.objects.all().delete()
        Patient.objects.all().delete()
        
        # Don't delete core demo users
        core_users = ['superadmin', 'facilityAdmin', 'docteur', 'patient']
        UserProfile.objects.exclude(user__username__in=core_users).delete()
        User.objects.exclude(username__in=core_users).delete()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Data cleaned successfully!'))
    
    def create_enhanced_facilities(self):
        """Create comprehensive Mali healthcare facilities with Bamako district mapping"""
        facilities_data = [
            # District 1 - Commune I
            {
                'name': 'CSREF Commune I',
                'facility_type': 'CSRef',
                'address': '123 Avenue de l\'Ind√©pendance, Commune I',
                'city': 'Bamako',
                'region': 'District de Bamako - Commune I',
                'phone': '+223 20 21 22 23',
                'email': 'csref1@sante.ml',
                'year_established': 1998
            },
            # District 2 - Commune II
            {
                'name': 'Centre de R√©adaptation P√©diatrique Commune II',
                'facility_type': 'CR',
                'address': '45 Avenue du Mali, Badalabougou',
                'city': 'Bamako',
                'region': 'District de Bamako - Commune II',
                'phone': '+223 20 23 24 25',
                'email': 'crp2@humanite-inclusion.org',
                'year_established': 2015
            },
            # District 3 - Commune III
            {
                'name': 'CSREF Commune III',
                'facility_type': 'CSRef',
                'address': '78 Rue de la Solidarit√©, Commune III',
                'city': 'Bamako',
                'region': 'District de Bamako - Commune III',
                'phone': '+223 20 26 27 28',
                'email': 'csref3@sante.ml',
                'year_established': 2001
            },
            # District 4 - Commune IV
            {
                'name': 'CSCom Magnambougou',
                'facility_type': 'CSCom',
                'address': '12 Rue des Fleurs, Magnambougou',
                'city': 'Bamako',
                'region': 'District de Bamako - Commune IV',
                'phone': '+223 65 66 67 68',
                'email': 'cscom.magnambougou@sante.ml',
                'year_established': 2005
            },
            # District 5 - Commune V
            {
                'name': 'Centre Handicap International Commune V',
                'facility_type': 'CR',
                'address': '89 Boulevard de l\'Inclusion, Commune V',
                'city': 'Bamako',
                'region': 'District de Bamako - Commune V',
                'phone': '+223 20 35 36 37',
                'email': 'centre.commune5@humanite-inclusion.org',
                'year_established': 2018
            },
            # District 6 - Commune VI
            {
                'name': 'H√¥pital Gabriel Tour√© - P√©diatrie',
                'facility_type': 'H',
                'address': 'Avenue de la Libert√©, Commune VI',
                'city': 'Bamako',
                'region': 'District de Bamako - Commune VI',
                'phone': '+223 20 29 30 31',
                'email': 'pediatrie@hgt.sante.ml',
                'year_established': 1959
            },
            # Additional specialized centers
            {
                'name': 'Centre National de R√©adaptation Fonctionnelle',
                'facility_type': 'CR',
                'address': '156 Route de Koulikoro, ACI 2000',
                'city': 'Bamako',
                'region': 'District de Bamako - ACI',
                'phone': '+223 20 40 41 42',
                'email': 'cnrf@sante.ml',
                'year_established': 2012
            },
            {
                'name': 'Clinique Pasteur - Unit√© P√©diatrique',
                'facility_type': 'A',
                'address': '234 Avenue Cheick Zayed, Hippodrome',
                'city': 'Bamako',
                'region': 'District de Bamako - Hippodrome',
                'phone': '+223 20 45 46 47',
                'email': 'pediatrie@pasteur.ml',
                'year_established': 2008
            }
        ]
        
        facilities = []
        for f_data in facilities_data:
            facility, created = Facility.objects.get_or_create(
                name=f_data['name'],
                defaults=f_data
            )
            if created:
                self.stdout.write(f'üè• Created facility: {facility.name} ({f_data["region"]})')
            facilities.append(facility)
        
        return facilities
    
    def create_enhanced_medical_staff(self, num_doctors, facilities):
        """Create comprehensive medical staff with Mali specializations"""
        # Mali common names
        first_names = ['Adama', 'Fatoumata', 'Ibrahim', 'Mariam', 'Oumar', 'Aminata', 'Moussa', 
                       'Kadiatou', 'Mamadou', 'A√Øssata', 'Seydou', 'Oumou', 'Abdoulaye', 'Fanta', 
                       'Samba', 'Rokia', 'Boubacar', 'Ass√©tou', 'Modibo', 'Hawa']
        last_names = ['Traor√©', 'Diallo', 'Kon√©', 'Keita', 'Demb√©l√©', 'Tour√©', 'Coulibaly', 
                      'Sangar√©', 'Ballo', 'Ciss√©', 'Camara', 'Sidib√©', 'Konat√©', 'Doumbia', 
                      'Samak√©', 'Sissoko', 'Ma√Øga', 'Kan√©', 'Bagayoko', 'Diabat√©']
        
        # Pediatric specializations for Mali context
        pediatric_specialties = [
            'P√©diatrie g√©n√©rale', 'P√©diatrie sp√©cialis√©e', 'Neurologie p√©diatrique',
            'Physioth√©rapie p√©diatrique', 'Orthophonie', 'Kin√©sith√©rapie',
            'Ergoth√©rapie', 'Psychologie p√©diatrique', 'Nutrition p√©diatrique',
            'Orthop√©die p√©diatrique', 'Cardiologie p√©diatrique', 'Pneumologie p√©diatrique'
        ]
        
        doctors = []
        pharmacists = []
        
        # Create doctors
        for i in range(num_doctors):
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            username = f"dr.{first_name.lower()}.{last_name.lower()}.{i+1}"
            
            user, created = User.objects.get_or_create(
                username=username,
                defaults={
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': f"{username}@sante.ml"
                }
            )
            
            if created:
                user.set_password('demo1234')
                user.save()
                
                user_profile = UserProfile.objects.get(user=user)
                user_profile.user_type = 'doctor'
                user_profile.phone_number = f'+223 7{random.randint(0, 9)} {random.randint(10, 99)} {random.randint(10, 99)} {random.randint(10, 99)}'
                
                # Assign to facility with preference for rehabilitation centers (HI focus)
                rehabilitation_facilities = [f for f in facilities if f.facility_type == 'CR']
                other_facilities = [f for f in facilities if f.facility_type != 'CR']
                
                if rehabilitation_facilities and random.random() < 0.7:  # 70% work at rehabilitation centers
                    user_profile.facility = random.choice(rehabilitation_facilities)
                else:
                    user_profile.facility = random.choice(other_facilities)
                
                user_profile.save()
                doctors.append(user_profile)
                
                specialty = random.choice(pediatric_specialties)
                self.stdout.write(f'üë®‚Äç‚öïÔ∏è Created doctor: Dr. {first_name} {last_name} ({specialty})')
        
        # Create pharmacists (fewer than doctors)
        num_pharmacists = max(3, num_doctors // 4)
        for i in range(num_pharmacists):
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            username = f"pharm.{first_name.lower()}.{last_name.lower()}.{i+1}"
            
            user, created = User.objects.get_or_create(
                username=username,
                defaults={
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': f"{username}@sante.ml"
                }
            )
            
            if created:
                user.set_password('demo1234')
                user.save()
                
                user_profile = UserProfile.objects.get(user=user)
                user_profile.user_type = 'pharmacist'
                user_profile.phone_number = f'+223 6{random.randint(0, 9)} {random.randint(10, 99)} {random.randint(10, 99)} {random.randint(10, 99)}'
                user_profile.facility = random.choice(facilities)
                user_profile.save()
                
                pharmacists.append(user_profile)
                self.stdout.write(f'üíä Created pharmacist: {first_name} {last_name}')
        
        return doctors, pharmacists
    
    def create_medication_database(self):
        """Create comprehensive Mali-available pediatric medications"""
        # Medication categories
        categories_data = [
            {'name': 'Antibiotiques p√©diatriques', 'description': 'Antibiotics for children', 'color_code': '#0C7C59', 'icon': 'fa-shield-virus'},
            {'name': 'Antipalud√©ens', 'description': 'Antimalarial medications', 'color_code': '#FCD116', 'icon': 'fa-mosquito'},
            {'name': 'Vitamines et suppl√©ments', 'description': 'Vitamins and supplements', 'color_code': '#CE1126', 'icon': 'fa-capsules'},
            {'name': 'Antalgiques p√©diatriques', 'description': 'Pain relief for children', 'color_code': '#2E7D32', 'icon': 'fa-hand-holding-medical'},
            {'name': 'M√©dicaments respiratoires', 'description': 'Respiratory medications', 'color_code': '#1976D2', 'icon': 'fa-lungs'},
            {'name': 'Nutrition th√©rapeutique', 'description': 'Therapeutic nutrition', 'color_code': '#F57C00', 'icon': 'fa-apple-alt'},
            {'name': 'Anticonvulsivants', 'description': 'Anti-seizure medications', 'color_code': '#7B1FA2', 'icon': 'fa-brain'},
            {'name': 'R√©habilitation', 'description': 'Rehabilitation medications', 'color_code': '#388E3C', 'icon': 'fa-dumbbell'},
        ]
        
        for cat_data in categories_data:
            category, created = MedicationCategory.objects.get_or_create(
                name=cat_data['name'],
                defaults=cat_data
            )
            if created:
                self.stdout.write(f'üìÇ Created category: {category.name}')
        
        # Mali-available pediatric medications
        medications_data = [
            # Antibiotics
            {'name': 'Amoxicilline sirop 125mg/5ml', 'category': 'Antibiotiques p√©diatriques', 'generic_name': 'Amoxicillin', 'form': 'SYRUP', 'strength': '125mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Cotrimoxazole p√©diatrique', 'category': 'Antibiotiques p√©diatriques', 'generic_name': 'Sulfamethoxazole + Trimethoprim', 'form': 'TABLET', 'strength': '200mg+40mg', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Azithromycine suspension', 'category': 'Antibiotiques p√©diatriques', 'generic_name': 'Azithromycin', 'form': 'SUSPENSION', 'strength': '200mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Antimalarials
            {'name': 'Art√©m√©ther + Lum√©fantrine', 'category': 'Antipalud√©ens', 'generic_name': 'Artemether + Lumefantrine', 'form': 'TABLET', 'strength': '20mg+120mg', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Art√©sunate injectable', 'category': 'Antipalud√©ens', 'generic_name': 'Artesunate', 'form': 'INJECTION', 'strength': '60mg', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Vitamins and supplements
            {'name': 'Vitamine A 200,000 UI', 'category': 'Vitamines et suppl√©ments', 'generic_name': 'Vitamin A', 'form': 'CAPSULE', 'strength': '200,000 UI', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Fer + Acide folique sirop', 'category': 'Vitamines et suppl√©ments', 'generic_name': 'Iron + Folic acid', 'form': 'SYRUP', 'strength': '25mg+0.5mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Zinc 20mg', 'category': 'Vitamines et suppl√©ments', 'generic_name': 'Zinc sulfate', 'form': 'TABLET', 'strength': '20mg', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Pain relief
            {'name': 'Parac√©tamol sirop 120mg/5ml', 'category': 'Antalgiques p√©diatriques', 'generic_name': 'Paracetamol', 'form': 'SYRUP', 'strength': '120mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Ibuprof√®ne suspension', 'category': 'Antalgiques p√©diatriques', 'generic_name': 'Ibuprofen', 'form': 'SUSPENSION', 'strength': '100mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Respiratory
            {'name': 'Salbutamol sirop', 'category': 'M√©dicaments respiratoires', 'generic_name': 'Salbutamol', 'form': 'SYRUP', 'strength': '2mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Prednisolone sirop', 'category': 'M√©dicaments respiratoires', 'generic_name': 'Prednisolone', 'form': 'SYRUP', 'strength': '15mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Therapeutic nutrition
            {'name': 'Plumpy\'Nut (RUTF)', 'category': 'Nutrition th√©rapeutique', 'generic_name': 'Ready-to-use therapeutic food', 'form': 'OTHER', 'strength': '92g sachet', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'F-75 (formule th√©rapeutique)', 'category': 'Nutrition th√©rapeutique', 'generic_name': 'Therapeutic milk formula', 'form': 'POWDER', 'strength': '413g', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Anti-seizure
            {'name': 'Ph√©nobarbital sirop', 'category': 'Anticonvulsivants', 'generic_name': 'Phenobarbital', 'form': 'SYRUP', 'strength': '15mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Carbamaz√©pine suspension', 'category': 'Anticonvulsivants', 'generic_name': 'Carbamazepine', 'form': 'SUSPENSION', 'strength': '100mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
            
            # Rehabilitation
            {'name': 'M√©latonine 3mg', 'category': 'R√©habilitation', 'generic_name': 'Melatonin', 'form': 'TABLET', 'strength': '3mg', 'is_pediatric_approved': True, 'available_in_mali': True},
            {'name': 'Baclof√®ne sirop', 'category': 'R√©habilitation', 'generic_name': 'Baclofen', 'form': 'SYRUP', 'strength': '5mg/5ml', 'is_pediatric_approved': True, 'available_in_mali': True},
        ]
        
        medications = []
        for med_data in medications_data:
            try:
                category = MedicationCategory.objects.get(name=med_data['category'])
                medication, created = Medication.objects.get_or_create(
                    name=med_data['name'],
                    defaults={**med_data, 'category': category}
                )
                if created:
                    medications.append(medication)
                    self.stdout.write(f'üíä Created medication: {medication.name}')
            except MedicationCategory.DoesNotExist:
                self.stdout.write(f'‚ùå Category not found: {med_data["category"]}')
        
        return medications
    
    def populate_icd10_codes(self):
        """Populate ICD-10 codes focused on pediatric disabilities in Mali"""
        icd10_data = [
            # Intellectual Disabilities
            {'code': 'F70', 'title': 'Retard mental l√©ger', 'description': 'Mild intellectual disabilities', 'category': 'F00-F99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'F71', 'title': 'Retard mental mod√©r√©', 'description': 'Moderate intellectual disabilities', 'category': 'F00-F99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'F72', 'title': 'Retard mental grave', 'description': 'Severe intellectual disabilities', 'category': 'F00-F99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'F84.0', 'title': 'Autisme infantile', 'description': 'Childhood autism', 'category': 'F00-F99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'F84.9', 'title': 'Trouble envahissant du d√©veloppement, sans pr√©cision', 'description': 'Pervasive developmental disorder, unspecified', 'category': 'F00-F99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            
            # Cerebral Palsy and Motor Disorders
            {'code': 'G80.0', 'title': 'Paralysie c√©r√©brale spastique quadripl√©gique', 'description': 'Spastic quadriplegic cerebral palsy', 'category': 'G00-G99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'G80.1', 'title': 'Paralysie c√©r√©brale spastique dipl√©gique', 'description': 'Spastic diplegic cerebral palsy', 'category': 'G00-G99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'G80.2', 'title': 'Paralysie c√©r√©brale spastique h√©mipl√©gique', 'description': 'Spastic hemiplegic cerebral palsy', 'category': 'G00-G99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'G80.3', 'title': 'Paralysie c√©r√©brale dyskin√©tique', 'description': 'Dyskinetic cerebral palsy', 'category': 'G00-G99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'G80.4', 'title': 'Paralysie c√©r√©brale ataxique', 'description': 'Ataxic cerebral palsy', 'category': 'G00-G99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            
            # Sensory Impairments
            {'code': 'H54.0', 'title': 'C√©cit√©, binoculaire', 'description': 'Blindness, binocular', 'category': 'H00-H59', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'H54.1', 'title': 'Malvoyance grave, binoculaire', 'description': 'Severe visual impairment, binocular', 'category': 'H00-H59', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'H90.0', 'title': 'Surdit√© de transmission, bilat√©rale', 'description': 'Conductive hearing loss, bilateral', 'category': 'H60-H95', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'H90.3', 'title': 'Surdit√© de perception, bilat√©rale', 'description': 'Sensorineural hearing loss, bilateral', 'category': 'H60-H95', 'is_pediatric_relevant': True, 'is_disability_related': True},
            
            # Malnutrition (common in Mali)
            {'code': 'E43', 'title': 'Malnutrition prot√©ino-√©nerg√©tique grave, sans pr√©cision', 'description': 'Unspecified severe protein-energy malnutrition', 'category': 'OTHER', 'is_pediatric_relevant': True, 'is_common_in_mali': True},
            {'code': 'E44.0', 'title': 'Malnutrition prot√©ino-√©nerg√©tique mod√©r√©e', 'description': 'Moderate protein-energy malnutrition', 'category': 'OTHER', 'is_pediatric_relevant': True, 'is_common_in_mali': True},
            {'code': 'E45', 'title': 'Retard de d√©veloppement cons√©cutif √† la malnutrition', 'description': 'Retarded development following protein-energy malnutrition', 'category': 'OTHER', 'is_pediatric_relevant': True, 'is_common_in_mali': True},
            
            # Congenital Malformations
            {'code': 'Q05.9', 'title': 'Spina bifida, sans pr√©cision', 'description': 'Spina bifida, unspecified', 'category': 'Q00-Q99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'Q90.9', 'title': 'Syndrome de Down, sans pr√©cision', 'description': 'Down syndrome, unspecified', 'category': 'Q00-Q99', 'is_pediatric_relevant': True, 'is_disability_related': True},
            {'code': 'Q66.0', 'title': 'Pied bot √©quin varus cong√©nital', 'description': 'Congenital talipes equinovarus', 'category': 'Q00-Q99', 'is_pediatric_relevant': True, 'is_disability_related': True},
        ]
        
        icd10_codes = []
        created_count = 0
        for icd_data in icd10_data:
            icd10_code, created = ICD10Code.objects.get_or_create(
                code=icd_data['code'],
                defaults=icd_data
            )
            icd10_codes.append(icd10_code)  # Always add to list
            if created:
                created_count += 1
                self.stdout.write(f'üè∑Ô∏è Created ICD-10: {icd10_code.code} - {icd10_code.title}')
        
        if created_count == 0:
            self.stdout.write(f'üè∑Ô∏è ICD-10 codes already exist ({len(icd10_codes)} codes available)')
        
        return icd10_codes
    
    def create_enhanced_patients(self, num_patients, facilities):
        """Create comprehensive pediatric patients with Mali context and district mapping"""
        # Mali child names
        child_first_names = ['Ibrahim', 'Fatoumata', 'Mamadou', 'A√Øssata', 'Oumar', 'Aminata', 
                             'Adama', 'Fanta', 'Seydou', 'Mariam', 'Moussa', 'Kadiatou', 'Abdoulaye', 
                             'Oumou', 'Samba', 'Rokia', 'Boubacar', 'Ass√©tou', 'Modibo', 'Hawa']
        last_names = ['Traor√©', 'Diallo', 'Kon√©', 'Keita', 'Demb√©l√©', 'Tour√©', 'Coulibaly', 
                      'Sangar√©', 'Ballo', 'Ciss√©', 'Camara', 'Sidib√©', 'Konat√©', 'Doumbia', 
                      'Samak√©', 'Sissoko', 'Ma√Øga', 'Kan√©', 'Bagayoko', 'Diabat√©']
        
        # Bamako districts and neighborhoods
        bamako_locations = [
            {'district': 'Commune I', 'neighborhoods': ['Quartier du Fleuve', 'Dj√©libougou', 'Doumanzana', 'Fadjiguila']},
            {'district': 'Commune II', 'neighborhoods': ['Badalabougou', 'Quinzambougou', 'Torokorobougou', 'Missira']},
            {'district': 'Commune III', 'neighborhoods': ['Centre Commercial', 'Bamako-Coura', 'M√©dina-Coura', 'Bolibana']},
            {'district': 'Commune IV', 'neighborhoods': ['Taliko', 'Lassa', 'Sibiribougou', 'Djikoroni Para']},
            {'district': 'Commune V', 'neighborhoods': ['Baco-Djicoroni', 'Sabalibougou', 'Daoudabougou', 'Kalaban-Coura']},
            {'district': 'Commune VI', 'neighborhoods': ['Banankabougou', 'Magnambougou', 'Sokorodji', 'Faladi√©']},
        ]
        
        # Mali-specific family situations and transportation challenges
        family_situations = [
            {'type': 'nuclear', 'guardian_relation': 'parent', 'transport': 'walking'},
            {'type': 'extended', 'guardian_relation': 'grandparent', 'transport': 'motorcycle'},
            {'type': 'single_parent', 'guardian_relation': 'mother', 'transport': 'public_transport'},
            {'type': 'foster', 'guardian_relation': 'aunt/uncle', 'transport': 'walking'},
        ]
        
        patients = []
        for i in range(num_patients):
            first_name = random.choice(child_first_names)
            last_name = random.choice(last_names)
            gender = random.choice(['M', 'F'])
            
            # Age between 0-14 years (target demographic)
            age = random.randint(0, 14)
            today = datetime.date.today()
            date_of_birth = today - datetime.timedelta(days=age*365 + random.randint(0, 364))
            
            # Select location and transportation
            location = random.choice(bamako_locations)
            neighborhood = random.choice(location['neighborhoods'])
            address = f"{random.randint(1, 200)} {neighborhood}, {location['district']}, Bamako"
            
            # Family situation
            family_situation = random.choice(family_situations)
            
            # Create guardian info based on gender and family situation
            if family_situation['guardian_relation'] == 'mother':
                guardian_first_name = random.choice(['Fatoumata', 'Mariam', 'Aminata', 'Kadiatou', 'Oumou'])
            elif family_situation['guardian_relation'] == 'grandparent':
                guardian_first_name = random.choice(['Amadou', 'Fatoumata', 'Ibrahim', 'Mariam'])
            else:
                guardian_first_name = random.choice(['Adama', 'Fatoumata', 'Ibrahim', 'Mariam'])
            
            guardian_name = f"{guardian_first_name} {last_name}"
            guardian_phone = f'+223 7{random.randint(0, 9)} {random.randint(10, 99)} {random.randint(10, 99)} {random.randint(10, 99)}'
            
            # Create user for patient
            username = f"patient.{first_name.lower()}.{last_name.lower()}.{i+1}"
            user, created = User.objects.get_or_create(
                username=username,
                defaults={
                    'first_name': first_name,
                    'last_name': last_name,
                    'email': f"{username}@example.com"
                }
            )
            
            if created:
                user.set_password('demo1234')
                user.save()
                
                user_profile = UserProfile.objects.get(user=user)
                user_profile.user_type = 'patient'
                user_profile.save()
            
            # Generate unique patient ID
            import hashlib
            patient_id = f"P-{hashlib.md5(f'{first_name}{last_name}{date_of_birth}'.encode()).hexdigest()[:8].upper()}"
            
            # Create comprehensive patient
            patient, created = Patient.objects.get_or_create(
                user=user,
                defaults={
                    'first_name': first_name,
                    'last_name': last_name,
                    'date_of_birth': date_of_birth,
                    'gender': gender,
                    'address': address,
                    'phone_number': guardian_phone,
                    'guardian_name': guardian_name,
                    'guardian_phone': guardian_phone,
                    'patient_id': patient_id,
                    'city': 'Bamako',
                    'region': location['district']
                }
            )
            
            if created:
                patients.append(patient)
                self.stdout.write(f'üë∂ Created patient: {first_name} {last_name}, age {age} ({location["district"]})')
        
        return patients
    
    def create_enhanced_medical_records(self, patients, doctors, facilities, icd10_codes):
        """Create medical records with ICD-10 coding"""
        for patient in patients:
            num_records = random.randint(1, 3)
            for i in range(num_records):
                doctor = random.choice(doctors)
                facility = doctor.facility or random.choice(facilities)
                
                days_ago = random.randint(30, 365)
                record_date = timezone.now() - datetime.timedelta(days=days_ago)
                
                # Select appropriate ICD-10 code for age group
                primary_diagnosis = random.choice(icd10_codes)
                
                record = MedicalRecord.objects.create(
                    patient=patient,
                    doctor=doctor,
                    facility=facility,
                    date=record_date,
                    primary_diagnosis_icd10=primary_diagnosis,
                    chief_complaint=f"Consultation pour {primary_diagnosis.title}",
                    present_illness="Pr√©sente des difficult√©s de d√©veloppement n√©cessitant une prise en charge sp√©cialis√©e.",
                    physical_examination="Examen physique r√©v√©lant des signes compatibles avec le diagnostic.",
                    treatment_plan="Plan de prise en charge multidisciplinaire recommand√©.",
                    recommendations="Suivi r√©gulier et r√©√©ducation fonctionnelle."
                )
        
        self.stdout.write(f'üìã Created medical records with ICD-10 coding')
    
    def create_vital_signs_data(self, patients):
        """Create comprehensive vital signs data for pediatric patients"""
        for patient in patients:
            medical_records = MedicalRecord.objects.filter(patient=patient)
            for record in medical_records:
                if not hasattr(record, 'vital_signs'):
                    # Calculate age at time of record
                    age_days = (record.date.date() - patient.date_of_birth).days
                    age_months = age_days / 30.44
                    
                    # Age-appropriate vital signs
                    if age_months < 12:  # Infant
                        height = random.uniform(45, 75)
                        weight = random.uniform(3, 10)
                        heart_rate = random.randint(100, 160)
                    elif age_months < 60:  # Toddler
                        height = random.uniform(75, 105)
                        weight = random.uniform(10, 18)
                        heart_rate = random.randint(90, 140)
                    else:  # Child
                        height = random.uniform(105, 160)
                        weight = random.uniform(18, 60)
                        heart_rate = random.randint(70, 120)
                    
                    VitalSigns.objects.create(
                        medical_record=record,
                        height=Decimal(str(round(height, 1))),
                        weight=Decimal(str(round(weight, 2))),
                        heart_rate=heart_rate,
                        temperature=Decimal(str(round(random.uniform(36.5, 37.2), 1))),
                        respiratory_rate=random.randint(15, 30)
                    )
        
        self.stdout.write(f'üìä Created vital signs data')
    
    def create_enhanced_appointments(self, patients, doctors, facilities):
        """Create appointments with realistic scheduling"""
        today = timezone.now().date()
        for patient in patients:
            num_appointments = random.randint(1, 4)
            for i in range(num_appointments):
                doctor = random.choice(doctors)
                facility = doctor.facility or random.choice(facilities)
                
                if random.random() < 0.6:  # Future appointment
                    days_ahead = random.randint(1, 60)
                    appointment_date = today + datetime.timedelta(days=days_ahead)
                    status = random.choice(['scheduled', 'confirmed'])
                else:  # Past appointment
                    days_ago = random.randint(1, 180)
                    appointment_date = today - datetime.timedelta(days=days_ago)
                    status = random.choice(['completed', 'completed', 'completed', 'cancelled'])
                
                hour = random.randint(8, 16)
                minute = random.choice([0, 15, 30, 45])
                appointment_datetime = timezone.make_aware(
                    datetime.datetime.combine(appointment_date, datetime.time(hour, minute))
                )
                
                Appointment.objects.create(
                    patient=patient,
                    doctor=doctor,
                    facility=facility,
                    appointment_date=appointment_datetime,
                    reason=random.choice(['Suivi r√©gulier', '√âvaluation d√©veloppement', 'R√©√©ducation']),
                    status=status
                )
        
        self.stdout.write(f'üìÖ Created enhanced appointments')
    
    def create_enhanced_rehabilitation_plans(self, patients, doctors):
        """Create rehabilitation plans - simplified due to schema mismatch"""
        try:
            # Try to create one rehabilitation plan to test the schema
            sample_patient = random.choice(patients)
            sample_doctor = random.choice(doctors)
            start_date = timezone.now().date() - datetime.timedelta(days=random.randint(30, 180))
            
            RehabilitationPlan.objects.create(
                patient=sample_patient,
                prescribing_doctor=sample_doctor,
                start_date=start_date,
                diagnosis="Plan de r√©adaptation p√©diatrique",
                goals="Am√©lioration des capacit√©s fonctionnelles et de l'autonomie",
                status='active'
            )
            
            # If successful, create more
            for patient in random.sample(patients, k=min(5, len(patients))):
                doctor = random.choice(doctors)
                start_date = timezone.now().date() - datetime.timedelta(days=random.randint(30, 180))
                
                RehabilitationPlan.objects.create(
                    patient=patient,
                    prescribing_doctor=doctor,
                    start_date=start_date,
                    diagnosis="Plan de r√©adaptation p√©diatrique",
                    goals="Am√©lioration des capacit√©s fonctionnelles et de l'autonomie",
                    status='active'
                )
            
            self.stdout.write(f'üèãÔ∏è Created rehabilitation plans')
        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è Skipped rehabilitation plans due to schema mismatch: {str(e)}')
    
    def create_enhanced_prescriptions(self, patients, doctors, pharmacists, medications, facilities):
        """Create prescriptions with realistic workflow"""
        for patient in random.sample(patients, k=int(len(patients) * 0.4)):
            doctor = random.choice(doctors)
            
            prescription = Prescription.objects.create(
                patient=patient,
                prescribing_doctor=doctor,
                prescribing_facility=doctor.facility,
                diagnosis="Prescription p√©diatrique",
                status=random.choice(['PRESCRIBED', 'VALIDATED', 'DISPENSED']),
                priority='NORMAL'
            )
            
            # Add medications
            for _ in range(random.randint(1, 3)):
                medication = random.choice(medications)
                PrescriptionMedication.objects.create(
                    prescription=prescription,
                    medication=medication,
                    dose="Selon √¢ge et poids",
                    frequency="2 fois par jour",
                    duration_days=random.randint(7, 30)
                )
        
        self.stdout.write(f'üíä Created prescriptions')
    
    def create_enhanced_vouchers(self, patients, doctors, facilities):
        """Create vouchers for HI workflow"""
        for patient in random.sample(patients, k=int(len(patients) * 0.7)):
            issuing_doctor = random.choice(doctors)
            target_facility = random.choice(facilities)
            
            issue_date = timezone.now().date() - datetime.timedelta(days=random.randint(1, 90))
            expiry_date = issue_date + datetime.timedelta(days=180)
            
            Voucher.objects.create(
                patient=patient,
                issuing_doctor=issuing_doctor,
                issuing_facility=issuing_doctor.facility,
                target_facility=target_facility,
                service_type="R√©habilitation p√©diatrique",
                description=f"Bon pour r√©√©ducation enfant {patient.first_name}",
                issue_date=issue_date,
                expiry_date=expiry_date,
                status=random.choice(['issued', 'validated', 'used'])
            )
        
        self.stdout.write(f'üé´ Created vouchers')
    
    def create_demo_users(self, facilities):
        """Create demo admin users"""
        # Ensure core demo users exist
        demo_users = [
            {'username': 'superadmin', 'user_type': 'superadmin', 'facility': None},
            {'username': 'facilityAdmin', 'user_type': 'facility_admin', 'facility': facilities[0] if facilities else None},
        ]
        
        for user_data in demo_users:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'first_name': user_data['username'].title(),
                    'last_name': 'Demo',
                    'email': f"{user_data['username']}@demo.ml",
                    'is_staff': True if user_data['user_type'] == 'superadmin' else False,
                    'is_superuser': True if user_data['user_type'] == 'superadmin' else False
                }
            )
            
            if created:
                user.set_password('demo1234')
                user.save()
            
            # Update user profile
            profile = user.profile
            profile.user_type = user_data['user_type']
            profile.facility = user_data['facility']
            profile.save()
        
        self.stdout.write(f'üë§ Created demo admin users') 