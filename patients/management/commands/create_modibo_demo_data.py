from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from accounts.models import UserProfile
from patients.models import Patient
from appointments.models import Appointment
from vouchers.models import Voucher
from rehabilitation.models import RehabilitationPlan, RehabilitationSession
from facilities.models import Facility
from django.utils import timezone
from datetime import timedelta, datetime
import random

class Command(BaseCommand):
    help = 'Create additional demo data for Modibo Kan√© patient'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üéØ Creating demo data for Modibo Kan√©...'))
        
        try:
            # Get the patient user and record
            patient_user = User.objects.get(username='patient')
            patient = Patient.objects.get(user=patient_user)
            
            self.stdout.write(f"üìã Working with patient: {patient.first_name} {patient.last_name} (ID: {patient.patient_id})")
            
            # Get some doctors and facilities
            doctors = UserProfile.objects.filter(user_type='doctor')[:5]
            facilities = Facility.objects.all()[:3]
            
            if not doctors.exists() or not facilities.exists():
                self.stdout.write(self.style.ERROR('‚ùå Need doctors and facilities in the system first'))
                return
            
            # 1. Create additional appointments
            self.stdout.write('\nüìÖ Creating appointments...')
            existing_appointments = Appointment.objects.filter(patient=patient).count()
            
            for i in range(4):  # Create 4 more appointments
                future_date = timezone.now() + timedelta(days=random.randint(1, 60))
                appointment_type = random.choice([
                    'Consultation de suivi',
                    'S√©ance de kin√©sith√©rapie',
                    'Consultation orthophonie',
                    '√âvaluation nutritionnelle',
                    'Contr√¥le m√©dical'
                ])
                
                appointment = Appointment.objects.create(
                    patient=patient,
                    doctor=random.choice(doctors),
                    facility=random.choice(facilities),
                    appointment_date=future_date,
                    reason=appointment_type,
                    status='scheduled',
                    notes=f'Rendez-vous programm√© pour {appointment_type.lower()}'
                )
                self.stdout.write(f"‚úÖ Created appointment: {appointment.reason} - {appointment.appointment_date.strftime('%d/%m/%Y')}")
            
            # 2. Create additional vouchers  
            self.stdout.write('\nüé´ Creating vouchers...')
            
            voucher_services = [
                'Consultation kin√©sith√©rapie',
                'S√©ance orthophonie', 
                'Consultation nutritionnelle',
                '√âvaluation psychomotrice',
                'Consultation p√©diatrique'
            ]
            
            for service in voucher_services:
                voucher = Voucher.objects.create(
                    patient=patient,
                    issuing_facility=random.choice(facilities),
                    target_facility=random.choice(facilities),
                    service_type=service,
                    status=random.choice(['issued', 'validated']),
                    issue_date=timezone.now().date(),
                    expiry_date=(timezone.now() + timedelta(days=30)).date(),
                    issuing_doctor=random.choice(doctors)
                )
                self.stdout.write(f"‚úÖ Created voucher: {service}")
            
            # 3. Enhance rehabilitation plan with exercises
            self.stdout.write('\nüèÉ‚Äç‚ôÇÔ∏è Creating exercise sessions...')
            
            # Get or create rehabilitation plan
            rehab_plan = RehabilitationPlan.objects.filter(patient=patient).first()
            if not rehab_plan:
                rehab_plan = RehabilitationPlan.objects.create(
                    patient=patient,
                    prescribing_doctor=random.choice(doctors),
                    start_date=timezone.now().date(),
                    diagnosis='Plan personnalis√© pour am√©liorer la mobilit√© et l\'autonomie',
                    goals='Renforcer la mobilit√©, d√©velopper l\'autonomie, am√©liorer la communication',
                    status='active'
                )
                self.stdout.write(f"‚úÖ Created rehabilitation plan")
            
            # Create exercise sessions with detailed notes
            exercise_sessions = [
                {
                    'type': 'physiotherapy',
                    'notes': 'Exercices de mobilit√© des membres inf√©rieurs:\n- √âtirements des jambes (3x15 r√©p√©titions)\n- Exercices d\'√©quilibre (2 minutes)\n- Renforcement musculaire doux\n- Marche assist√©e',
                    'duration': 45
                },
                {
                    'type': 'speech_therapy', 
                    'notes': 'S√©ance de stimulation du langage:\n- Exercices de prononciation (voyelles et consonnes)\n- Jeux de mots et r√©p√©tition\n- Lecture guid√©e (10 minutes)\n- Exercices de souffle',
                    'duration': 30
                },
                {
                    'type': 'occupational_therapy',
                    'notes': 'Activit√©s de coordination:\n- Exercices de pr√©hension fine\n- Jeux de coordination ≈ìil-main\n- Activit√©s de lat√©ralisation\n- Parcours moteur adapt√©',
                    'duration': 40
                },
                {
                    'type': 'occupational_therapy',
                    'notes': 'Entra√Ænement aux activit√©s quotidiennes:\n- Exercices d\'habillage\n- Manipulation d\'objets du quotidien\n- Exercices d\'√©criture adapt√©e\n- Autonomie alimentaire',
                    'duration': 35
                },
                {
                    'type': 'psychological_support',
                    'notes': 'Activit√©s de stimulation mentale:\n- Jeux de m√©moire visuelle\n- Exercices de logique simple\n- Activit√©s de concentration\n- Puzzles adapt√©s √† l\'√¢ge',
                    'duration': 25
                }
            ]
            
            for i, session_data in enumerate(exercise_sessions):
                session_date = timezone.now() + timedelta(weeks=i)
                status = 'completed' if i < 3 else 'planned'
                
                session = RehabilitationSession.objects.create(
                    rehabilitation_plan=rehab_plan,
                    session_date=session_date,
                    duration_minutes=session_data['duration'],
                    session_type=session_data['type'],
                    notes=session_data['notes'],
                    next_session_recommendations='Continuer les exercices selon progression',
                    status=status,
                    therapist=random.choice(doctors)
                )
                self.stdout.write(f"‚úÖ Created {session_data['type']} session ({status})")
            
            # Summary
            total_appointments = Appointment.objects.filter(patient=patient).count()
            total_vouchers = Voucher.objects.filter(patient=patient).count()
            total_sessions = RehabilitationSession.objects.filter(rehabilitation_plan__patient=patient).count()
            
            self.stdout.write(f'\nüìä Final counts for {patient.first_name} {patient.last_name}:')
            self.stdout.write(f"üìÖ Appointments: {total_appointments}")
            self.stdout.write(f"üé´ Vouchers: {total_vouchers}")
            self.stdout.write(f"üèÉ‚Äç‚ôÇÔ∏è Exercise sessions: {total_sessions}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Error creating demo data: {str(e)}'))
            
        self.stdout.write(self.style.SUCCESS('‚úÖ Demo data creation completed!')) 