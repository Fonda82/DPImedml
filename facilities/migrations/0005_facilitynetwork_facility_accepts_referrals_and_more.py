# Generated by Django 4.2.23 on 2025-06-26 11:59

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("vouchers", "0002_initial"),
        ("referrals", "0001_initial"),
        ("accounts", "0001_initial"),
        ("patients", "0009_hospitalization_rehabilitationexercise_and_more"),
        ("facilities", "0004_alter_facility_address_alter_facility_city_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="FacilityNetwork",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, verbose_name="Nom du réseau"),
                ),
                (
                    "network_type",
                    models.CharField(
                        choices=[
                            ("regional", "Réseau régional"),
                            ("specialty", "Réseau de spécialité"),
                            ("referral", "Réseau de référence"),
                            ("emergency", "Réseau d'urgence"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                (
                    "coordinator_contact",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.userprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Réseau d'établissements",
                "verbose_name_plural": "Réseaux d'établissements",
            },
        ),
        migrations.AddField(
            model_name="facility",
            name="accepts_referrals",
            field=models.BooleanField(
                default=True, verbose_name="Accepte les références"
            ),
        ),
        migrations.AddField(
            model_name="facility",
            name="can_send_referrals",
            field=models.BooleanField(
                default=True, verbose_name="Peut envoyer des références"
            ),
        ),
        migrations.AddField(
            model_name="facility",
            name="coordinates_lat",
            field=models.DecimalField(
                blank=True,
                decimal_places=6,
                max_digits=9,
                null=True,
                verbose_name="Latitude",
            ),
        ),
        migrations.AddField(
            model_name="facility",
            name="coordinates_lng",
            field=models.DecimalField(
                blank=True,
                decimal_places=6,
                max_digits=9,
                null=True,
                verbose_name="Longitude",
            ),
        ),
        migrations.AddField(
            model_name="facility",
            name="emergency_contact",
            field=models.CharField(
                blank=True, max_length=20, verbose_name="Contact urgence"
            ),
        ),
        migrations.AddField(
            model_name="facility",
            name="facility_code",
            field=models.CharField(
                blank=True,
                max_length=20,
                null=True,
                unique=True,
                verbose_name="Code établissement",
            ),
        ),
        migrations.AddField(
            model_name="facility",
            name="network_member",
            field=models.BooleanField(default=True, verbose_name="Membre du réseau"),
        ),
        migrations.AddField(
            model_name="facility",
            name="operating_hours",
            field=models.TextField(blank=True, verbose_name="Heures d'ouverture"),
        ),
        migrations.AddField(
            model_name="facility",
            name="voucher_validation_enabled",
            field=models.BooleanField(
                default=True, verbose_name="Validation bons activée"
            ),
        ),
        migrations.CreateModel(
            name="VoucherValidationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "validation_type",
                    models.CharField(
                        choices=[
                            ("creation", "Création"),
                            ("validation", "Validation"),
                            ("redemption", "Utilisation"),
                            ("cancellation", "Annulation"),
                            ("transfer", "Transfert"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "Succès"),
                            ("failed", "Échec"),
                            ("pending", "En attente"),
                        ],
                        max_length=10,
                    ),
                ),
                ("validation_date", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "validation_response_time",
                    models.PositiveIntegerField(
                        blank=True, help_text="Temps de réponse en secondes", null=True
                    ),
                ),
                (
                    "facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="voucher_validations",
                        to="facilities.facility",
                    ),
                ),
                (
                    "originating_facility",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="voucher_origins",
                        to="facilities.facility",
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.userprofile",
                    ),
                ),
                (
                    "voucher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="validation_logs",
                        to="vouchers.voucher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log validation bon",
                "verbose_name_plural": "Logs validation bons",
                "ordering": ["-validation_date"],
            },
        ),
        migrations.CreateModel(
            name="InterFacilityCommunication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("communication_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "communication_type",
                    models.CharField(
                        choices=[
                            ("referral", "Référence patient"),
                            ("voucher_validation", "Validation bon"),
                            ("information_request", "Demande d'information"),
                            ("resource_sharing", "Partage de ressources"),
                            ("emergency_notification", "Notification urgence"),
                            ("administrative", "Administratif"),
                        ],
                        max_length=25,
                    ),
                ),
                ("subject", models.CharField(max_length=200, verbose_name="Sujet")),
                ("message", models.TextField(verbose_name="Message")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("sent", "Envoyé"),
                            ("delivered", "Livré"),
                            ("read", "Lu"),
                            ("responded", "Répondu"),
                            ("failed", "Échec"),
                        ],
                        default="sent",
                        max_length=20,
                    ),
                ),
                ("sent_date", models.DateTimeField(auto_now_add=True)),
                ("delivered_date", models.DateTimeField(blank=True, null=True)),
                ("read_date", models.DateTimeField(blank=True, null=True)),
                ("response_date", models.DateTimeField(blank=True, null=True)),
                (
                    "response_message",
                    models.TextField(blank=True, verbose_name="Message de réponse"),
                ),
                (
                    "is_urgent",
                    models.BooleanField(default=False, verbose_name="Urgent"),
                ),
                (
                    "requires_response",
                    models.BooleanField(default=False, verbose_name="Réponse requise"),
                ),
                (
                    "from_facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_communications",
                        to="facilities.facility",
                    ),
                ),
                (
                    "received_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="received_communications",
                        to="accounts.userprofile",
                    ),
                ),
                (
                    "related_patient",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="patients.patient",
                    ),
                ),
                (
                    "related_referral",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="referrals.referral",
                    ),
                ),
                (
                    "related_voucher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="vouchers.voucher",
                    ),
                ),
                (
                    "response_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="communication_responses",
                        to="accounts.userprofile",
                    ),
                ),
                (
                    "sent_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_communications",
                        to="accounts.userprofile",
                    ),
                ),
                (
                    "to_facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_communications",
                        to="facilities.facility",
                    ),
                ),
            ],
            options={
                "verbose_name": "Communication inter-établissements",
                "verbose_name_plural": "Communications inter-établissements",
                "ordering": ["-sent_date"],
            },
        ),
        migrations.CreateModel(
            name="FacilityNetworkMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Membre"),
                            ("coordinator", "Coordinateur"),
                            ("referral_hub", "Hub de référence"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                ("joined_date", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("can_send_referrals", models.BooleanField(default=True)),
                ("can_receive_referrals", models.BooleanField(default=True)),
                ("can_validate_vouchers", models.BooleanField(default=True)),
                (
                    "facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="facilities.facility",
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="facilities.facilitynetwork",
                    ),
                ),
            ],
            options={
                "verbose_name": "Adhésion réseau",
                "verbose_name_plural": "Adhésions réseaux",
                "unique_together": {("facility", "network")},
            },
        ),
        migrations.AddField(
            model_name="facilitynetwork",
            name="coordinator_facility",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="coordinated_networks",
                to="facilities.facility",
            ),
        ),
        migrations.AddField(
            model_name="facilitynetwork",
            name="facilities",
            field=models.ManyToManyField(
                related_name="networks",
                through="facilities.FacilityNetworkMembership",
                to="facilities.facility",
            ),
        ),
        migrations.CreateModel(
            name="FacilityCapability",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "capability_type",
                    models.CharField(
                        choices=[
                            ("specialty", "Spécialité médicale"),
                            ("service", "Service disponible"),
                            ("equipment", "Équipement"),
                            ("program", "Programme spécialisé"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("pediatrics", "Pédiatrie"),
                            ("rehabilitation", "Réadaptation"),
                            ("orthopedics", "Orthopédie"),
                            ("neurology", "Neurologie"),
                            ("psychology", "Psychologie"),
                            ("physiotherapy", "Kinésithérapie"),
                            ("occupational_therapy", "Ergothérapie"),
                            ("speech_therapy", "Orthophonie"),
                            ("surgery", "Chirurgie"),
                            ("radiology", "Radiologie"),
                            ("laboratory", "Laboratoire"),
                            ("nutrition", "Nutrition"),
                            ("social_work", "Service social"),
                        ],
                        max_length=100,
                        verbose_name="Nom",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "is_available",
                    models.BooleanField(default=True, verbose_name="Disponible"),
                ),
                (
                    "capacity_level",
                    models.CharField(
                        choices=[
                            ("basic", "Basique"),
                            ("intermediate", "Intermédiaire"),
                            ("advanced", "Avancé"),
                            ("expert", "Expert"),
                        ],
                        default="basic",
                        max_length=20,
                        verbose_name="Niveau",
                    ),
                ),
                (
                    "available_days",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Jours disponibles"
                    ),
                ),
                (
                    "available_hours",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Heures disponibles"
                    ),
                ),
                (
                    "max_patients_per_day",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Patients max/jour"
                    ),
                ),
                (
                    "current_wait_time_days",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Délai d'attente (jours)"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "facility",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capabilities",
                        to="facilities.facility",
                    ),
                ),
            ],
            options={
                "verbose_name": "Capacité établissement",
                "verbose_name_plural": "Capacités établissements",
                "unique_together": {("facility", "name")},
            },
        ),
    ]
